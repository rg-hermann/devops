# File: steps/update-task-definition.yml
parameters:
  - name: 'clusterName'
    type: string
  - name: 'serviceName'
    type: string
  - name: 'containerName'
    type: string
  - name: 'tag'
    type: string
  - name: 'family'
    type: string
  - name: 'repositoryName'
    type: string
  - name: 'desiredCount'
    type: string
    default: "1"
steps:
  - bash: |
      set -euo pipefail
      ECS_TASK_FAMILY="${{ parameters.family }}"

      TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition \
        "${ECS_TASK_FAMILY}" --region "$(AWS_DEFAULT_REGION)")

      tempfile='$(Agent.TempDirectory)/$(Build.BuildId)-task-definition.json'

      echo "${TASK_DEFINITION}" > $tempfile
      echo "##vso[task.setvariable variable=TEMP_FILE]${tempfile}"
    name: 'getTaskDefinition'
    displayName: "Get Task Definition"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

  - bash: |
      set -euo pipefail
      NEW_IMAGE="$(AWS_ACCOUNT_NUMBER).dkr.ecr.$(AWS_DEFAULT_REGION).amazonaws.com/${{ parameters.repositoryName }}:${{ parameters.tag }}"

      TASK_DEFINITION="$(cat $(TEMP_FILE))"
        
      NEW_TASK_DEFINTIION=$(
        echo "${TASK_DEFINITION}" | \
        jq --arg IMAGE "${NEW_IMAGE}"\
          '.taskDefinition |
          .containerDefinitions[0].image = $IMAGE |    
          del(.taskDefinitionArn) |
          del(.revision) |
          del(.status) |
          del(.requiresAttributes) |
          del(.compatibilities) |
          del(.registeredAt) |
          del(.registeredBy)'
      )
      TASK_REVISION=$(aws ecs register-task-definition \
        --region "$(AWS_DEFAULT_REGION)" \
        --cli-input-json "$NEW_TASK_DEFINTIION" | jq -r '.taskDefinition.revision')

      echo "##vso[task.setvariable variable=TASK_REVISION]$TASK_REVISION"
    name: 'createTaskDefinition'
    displayName: "Create Task Definition"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

  - bash: |
      set -euo pipefail
  
      aws ecs update-service --cluster "${ECS_CLUSTER}" \
        --service "${ECS_SERVICE}" \
        --task-definition "${ECS_TASK_FAMILY}:$(TASK_REVISION)"
    name: 'UpdateService'
    displayName: "Update Service"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      ECS_TASK_FAMILY: '${{ parameters.family }}'
      ECS_SERVICE: '${{ parameters.serviceName }}'
      ECS_CLUSTER: '${{ parameters.clusterName }}'

  - bash: |
      set -euo pipefail

      while true; do
        SERVICE_STATUS=$(aws ecs describe-services --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}" --region "$(AWS_DEFAULT_REGION)" | jq -r '.services[0].deployments[0].rolloutState')
        if [ "$SERVICE_STATUS" == "COMPLETED" ]; then
          echo "Service has reached a steady state"
          break
        else
          echo "Service is still updating - ${SERVICE_STATUS}"
          sleep 10
        fi
      done
    name: 'CheckService'
    displayName: "Check Service"
    timeoutInMinutes: 10
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      ECS_SERVICE: '${{ parameters.serviceName }}'
      ECS_CLUSTER: '${{ parameters.clusterName }}'
