parameters:
  - name: "local_env"
    type: string
  - name: 'service_connection'
    type: string

steps:
  - bash: |
      set -euo pipefail
      cd src/
      zip -r "xxxxx-${{ parameters.local_env }}-code.zip" .

      if [ "$(NODE_CACHE_RESTORED)" != "true" ]; then
        cd ../layer
        zip -r "xxxxx-${{ parameters.local_env }}-layer.zip" .
      else
        echo "Não houve alteração de dependências. O arquivo de layer não será recriado."
      fi
    name: "CreateZipFiles"
    displayName: "Create Code and Layer Zip Files"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

  - task: S3Upload@1
    displayName: "Upload Code Zip File to S3"
    inputs:
      awsCredentials: ${{ parameters.service_connection }}
      regionName: '$(AWS_DEFAULT_REGION)'
      bucketName: '$(AWS_BUCKET)'
      sourceFolder: "$(System.DefaultWorkingDirectory)/src/"
      targetFolder: "code/"
      globExpressions: "xxxxx-${{ parameters.local_env }}-code.zip"

  - task: S3Upload@1
    displayName: "Upload Layer Zip File to S3"
    condition: ne(variables.NODE_CACHE_RESTORED, 'true')
    inputs:
      awsCredentials: ${{ parameters.service_connection }}
      regionName: '$(AWS_DEFAULT_REGION)'
      bucketName: '$(AWS_BUCKET)'
      sourceFolder: "$(System.DefaultWorkingDirectory)/layer/"
      targetFolder: "layer/"
      globExpressions: "xxxxx-${{ parameters.local_env }}-layer.zip"

  - bash: |
      set -euo pipefail

      if [ "$(NODE_CACHE_RESTORED)" != "true" ]; then
        echo "Deploying layer xxxxx-${{ parameters.local_env }}-layer"
        aws lambda publish-layer-version \
          --layer-name "xxxxx-${{ parameters.local_env }}-layer" \
          --content S3Bucket=$(AWS_BUCKET),S3Key="layer/xxxxx-${{ parameters.local_env }}-layer.zip" \
          --compatible-runtimes "nodejs20.x" \
          --description "xxxxx-${{ parameters.local_env }}-layer" \
          --compatible-architectures "x86_64"
      else
        echo "Não houve alteração de dependências. A versão da layer não será publicada."
      fi
    name: "UpdateLayer"
    displayName: "Update Layer Version"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

  - bash: |
      set -euo pipefail

      wait_for_update_completion() {
        local lambda_name=$1
        while true; do
          status=$(aws lambda get-function-configuration --function-name "${lambda_name}" --query "LastUpdateStatus" --output text)
          if [ "$status" = "Successful" ] || [ "$status" = "Failed" ]; then
            break
          fi
          echo "Waiting for ${lambda_name} to be ready for the next update..."
          sleep 5
        done
      }

      while read -r lambda_name; do
        lambda="xxxxx-${{ parameters.local_env }}-${lambda_name}"
        echo "Deploying lambda ${lambda}"

        aws lambda update-function-code \
            --function-name "${lambda}" \
            --s3-bucket $(AWS_BUCKET) \
            --s3-key "code/xxxxx-${{ parameters.local_env }}-code.zip"

        wait_for_update_completion "${lambda}"

        if [ "$(NODE_CACHE_RESTORED)" != "true" ]; then
          new_layer_arn=$(aws lambda list-layer-versions \
                              --layer-name "xxxxx-${{ parameters.local_env }}-layer" \
                              --output json \
                              --query "LayerVersions[0].LayerVersionArn" --no-cli-pager)

          aws lambda update-function-configuration \
              --function-name "${lambda}" \
              --layers "[${new_layer_arn}]"

          wait_for_update_completion "${lambda}"
        else
          echo "Não houve alteração de dependências. A configuração da layer não será atualizada para ${lambda}."
        fi
      done < '.list_of_lambdas_to_deploy'
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    name: "UpdateLambdas"
    displayName: "Update Lambdas ${{ parameters.local_env }}"
